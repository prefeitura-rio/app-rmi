basePath: /v1
definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.HealthResponse:
    properties:
      services:
        additionalProperties:
          type: string
        type: object
      status:
        type: string
      timestamp:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.Citizen:
    properties:
      cpf:
        type: string
      cpf_particao:
        type: integer
      datalake:
        $ref: '#/definitions/models.Datalake'
      documentos:
        $ref: '#/definitions/models.Documentos'
      email:
        $ref: '#/definitions/models.Email'
      endereco:
        $ref: '#/definitions/models.Endereco'
      mae:
        $ref: '#/definitions/models.Mae'
      menor_idade:
        type: boolean
      nascimento:
        $ref: '#/definitions/models.Nascimento'
      nome:
        type: string
      nome_social:
        type: string
      obito:
        $ref: '#/definitions/models.Obito'
      raca:
        type: string
      row_number:
        type: integer
      saude:
        $ref: '#/definitions/models.Saude'
      sexo:
        type: string
      telefone:
        $ref: '#/definitions/models.Telefone'
    type: object
  models.ClinicaFamilia:
    properties:
      id_cnes:
        type: string
      indicador:
        type: boolean
      nome:
        type: string
      telefone:
        type: string
    type: object
  models.Datalake:
    properties:
      last_updated:
        type: string
    type: object
  models.Documentos:
    properties:
      cns:
        items:
          type: string
        type: array
    type: object
  models.Email:
    properties:
      alternativo:
        items:
          type: integer
        type: array
      indicador:
        type: boolean
      principal:
        $ref: '#/definitions/models.EmailPrincipal'
    type: object
  models.EmailPrincipal:
    properties:
      origem:
        type: string
      sistema:
        type: string
      valor:
        type: string
    type: object
  models.Endereco:
    properties:
      alternativo:
        items:
          type: integer
        type: array
      indicador:
        type: boolean
      principal:
        $ref: '#/definitions/models.EnderecoPrincipal'
    type: object
  models.EnderecoPrincipal:
    properties:
      bairro:
        type: string
      cep:
        type: string
      complemento:
        type: string
      estado:
        type: string
      logradouro:
        type: string
      municipio:
        type: string
      numero:
        type: string
      origem:
        type: string
      sistema:
        type: string
      tipo_logradouro:
        type: string
    type: object
  models.EquipeSaudeFamilia:
    properties:
      id_ine:
        type: string
      indicador:
        type: boolean
      nome:
        type: string
      telefone:
        type: string
    type: object
  models.Mae:
    properties:
      cpf:
        type: string
      nome:
        type: string
    type: object
  models.Nascimento:
    properties:
      data:
        type: string
      municipio:
        type: string
      municipio_id:
        type: string
      pais:
        type: string
      pais_id:
        type: string
      uf:
        type: string
    type: object
  models.Obito:
    properties:
      ano:
        type: integer
      indicador:
        type: boolean
    type: object
  models.PhoneVerificationValidateRequest:
    properties:
      code:
        type: string
      ddd:
        type: string
      ddi:
        type: string
      valor:
        type: string
    required:
    - code
    - ddd
    - ddi
    - valor
    type: object
  models.Saude:
    properties:
      clinica_familia:
        $ref: '#/definitions/models.ClinicaFamilia'
      equipe_saude_familia:
        $ref: '#/definitions/models.EquipeSaudeFamilia'
    type: object
  models.SelfDeclaredAddressInput:
    properties:
      bairro:
        type: string
      cep:
        type: string
      complemento:
        type: string
      estado:
        type: string
      logradouro:
        type: string
      municipio:
        type: string
      numero:
        type: string
      tipo_logradouro:
        type: string
    required:
    - bairro
    - cep
    - estado
    - logradouro
    - municipio
    - numero
    type: object
  models.SelfDeclaredEmailInput:
    properties:
      valor:
        type: string
    required:
    - valor
    type: object
  models.SelfDeclaredPhoneInput:
    properties:
      ddd:
        type: string
      ddi:
        type: string
      valor:
        type: string
    required:
    - ddd
    - ddi
    - valor
    type: object
  models.SelfDeclaredRacaInput:
    properties:
      valor:
        type: string
    required:
    - valor
    type: object
  models.Telefone:
    properties:
      alternativo:
        items:
          type: integer
        type: array
      indicador:
        type: boolean
      principal:
        $ref: '#/definitions/models.TelefonePrincipal'
    type: object
  models.TelefonePrincipal:
    properties:
      ddd:
        type: string
      ddi:
        type: string
      origem:
        type: string
      sistema:
        type: string
      valor:
        type: string
    type: object
  models.UserConfigOptInResponse:
    properties:
      optin:
        type: boolean
    type: object
  models.UserConfigResponse:
    properties:
      firstlogin:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: suporte@rio.rj.gov.br
    name: Suporte RMI
    url: http://www.rio.rj.gov.br
  description: API para gerenciamento de dados de cidadãos do Rio de Janeiro
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API RMI
  version: "1.0"
paths:
  /citizen/{cpf}:
    get:
      consumes:
      - application/json
      description: Recupera os dados do cidadão por CPF, combinando dados base com
        atualizações autodeclaradas. Dados autodeclarados têm precedência sobre dados
        base. Os resultados são armazenados em cache usando Redis com TTL configurável.
      parameters:
      - description: CPF do cidadão (11 dígitos)
        in: path
        maxLength: 11
        minLength: 11
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Dados completos do cidadão
          schema:
            $ref: '#/definitions/models.Citizen'
        "400":
          description: Formato de CPF inválido
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Token de autenticação não fornecido ou inválido
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Acesso negado
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Cidadão não encontrado
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Erro interno do servidor
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Obter dados do cidadão
      tags:
      - citizen
  /citizen/{cpf}/address:
    put:
      consumes:
      - application/json
      description: Atualiza ou cria o endereço autodeclarado de um cidadão por CPF.
        Apenas o campo de endereço é atualizado.
      parameters:
      - description: Número do CPF
        in: path
        name: cpf
        required: true
        type: string
      - description: Endereço autodeclarado
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SelfDeclaredAddressInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Token de autenticação não fornecido ou inválido
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Acesso negado
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualizar endereço autodeclarado
      tags:
      - citizen
  /citizen/{cpf}/email:
    put:
      consumes:
      - application/json
      description: Atualiza ou cria o email autodeclarado de um cidadão por CPF. Apenas
        o campo de email é atualizado.
      parameters:
      - description: Número do CPF
        in: path
        name: cpf
        required: true
        type: string
      - description: Email autodeclarado
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SelfDeclaredEmailInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Token de autenticação não fornecido ou inválido
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Acesso negado
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualizar email autodeclarado
      tags:
      - citizen
  /citizen/{cpf}/ethnicity:
    put:
      consumes:
      - application/json
      description: Atualiza ou cria a etnia autodeclarada de um cidadão por CPF. Apenas
        o campo de etnia é atualizado.
      parameters:
      - description: Número do CPF
        in: path
        name: cpf
        required: true
        type: string
      - description: Etnia autodeclarada
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SelfDeclaredRacaInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Token de autenticação não fornecido ou inválido
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Acesso negado
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualizar etnia autodeclarada
      tags:
      - citizen
  /citizen/{cpf}/firstlogin:
    get:
      consumes:
      - application/json
      description: Verifica se este é o primeiro login do usuário
      parameters:
      - description: Número do CPF
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Token de autenticação não fornecido ou inválido
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Acesso negado
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Obter status do primeiro login
      tags:
      - citizen
    put:
      consumes:
      - application/json
      description: Define o status do primeiro login como falso para um usuário
      parameters:
      - description: Número do CPF
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Token de autenticação não fornecido ou inválido
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Acesso negado
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualizar status do primeiro login
      tags:
      - citizen
  /citizen/{cpf}/optin:
    get:
      consumes:
      - application/json
      description: Verifica se o usuário optou por receber notificações
      parameters:
      - description: Número do CPF
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserConfigOptInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Token de autenticação não fornecido ou inválido
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Acesso negado
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Obter status de opt-in
      tags:
      - citizen
    put:
      consumes:
      - application/json
      description: Atualiza o status de opt-in do usuário para notificações
      parameters:
      - description: Número do CPF
        in: path
        name: cpf
        required: true
        type: string
      - description: Status de opt-in
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserConfigOptInResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserConfigOptInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Token de autenticação não fornecido ou inválido
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Acesso negado
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualizar status de opt-in
      tags:
      - citizen
  /citizen/{cpf}/phone:
    put:
      consumes:
      - application/json
      description: Atualiza ou cria o telefone autodeclarado de um cidadão por CPF.
        Apenas o campo de telefone é atualizado (armazenado como pendente até verificado).
      parameters:
      - description: Número do CPF
        in: path
        name: cpf
        required: true
        type: string
      - description: Telefone autodeclarado
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SelfDeclaredPhoneInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Token de autenticação não fornecido ou inválido
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Acesso negado
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualizar telefone autodeclarado
      tags:
      - citizen
  /citizen/{cpf}/phone/validate:
    post:
      consumes:
      - application/json
      description: Validates the verification code sent to the phone number
      parameters:
      - description: CPF number
        in: path
        name: cpf
        required: true
        type: string
      - description: Verification code and phone
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PhoneVerificationValidateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Validate phone verification
      tags:
      - citizen
  /health:
    get:
      description: Verifica a saúde da API e suas dependências (MongoDB e Redis).
        Retorna status detalhado para cada serviço.
      produces:
      - application/json
      responses:
        "200":
          description: Todos os serviços estão saudáveis
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
        "503":
          description: Um ou mais serviços estão indisponíveis
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
      summary: Verificação de saúde
      tags:
      - health
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Tipo: Bearer token. Exemplo: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Operations about citizens
  name: citizen
- description: Health check operations
  name: health
